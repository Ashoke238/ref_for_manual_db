name: Databricks CI Pipeline

on:
  push:
    branches: [dev]
  workflow_dispatch:

jobs:
  checkout-code:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

  static-code-analysis:
    runs-on: ubuntu-latest
    needs: checkout-code
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üß™ Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üì¶ Install nbqa and flake8
        run: pip install nbqa flake8

      - name: üîç Run nbqa flake8 on notebooks
        run: |
          nbqa flake8 . || echo "Static analysis warnings only (non-blocking)"

  train-and-validate:
    runs-on: ubuntu-latest
    needs: static-code-analysis
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üß™ Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üì¶ Install dependencies
        run: pip install requests mlflow
        
      - name: üöÄ Trigger Databricks Train Job
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          JOB_ID: 150430378558626
          RUN_ID_FILE: train_run_id.txt
        run: python trigger_job.py

      - name: üîÅ Export RUN_ID for train
        run: echo "RUN_ID=$(cat train_run_id.txt)" >> $GITHUB_ENV

      - name: ‚è≥ Wait for Databricks Train Job Completion
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: python wait_for_job.py

      - name: ‚úÖ Validate Training Metrics
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          USER_EMAIL: ${{ secrets.MLFLOW_USER_EMAIL }}
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: python .github/scripts/validate_metrics.py

  inference-and-validate:
    runs-on: ubuntu-latest
    needs: train-and-validate

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üß™ Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üì¶ Install dependencies
        run: pip install requests mlflow

      - name: üöÄ Trigger Databricks Inference Job
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          JOB_ID: 643177853687692  # Replace with your inference job ID
          RUN_ID_FILE: inference_run_id.txt
        run: python trigger_job.py
        
      - name: üöÄ Run train notebook (check for errors)
        run: |
      - name: üîÅ Export RUN_ID for inference
        run: echo "RUN_ID=$(cat inference_run_id.txt)" >> $GITHUB_ENV

      - name: ‚è≥ Wait for Inference Job Completion
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: python wait_for_job.py

      - name: ‚úÖ Validate Inference Metrics
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          USER_EMAIL: ${{ secrets.MLFLOW_USER_EMAIL }}
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: python .github/scripts/validate_inference_metrics.py

  promote-to-main:
    runs-on: ubuntu-latest
    needs: inference-and-validate  # Only runs if all previous jobs passed
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üß™ Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: üîê Authenticate GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.GH_TOKEN }}"

      - name: üöÄ Create & Merge PR to main
        run: |
          gh pr create --base main --head dev --title "Auto promotion from dev to main" --body "‚úÖ All checks passed. Promoting to main." || echo "PR already exists or failed to create."
          gh pr merge dev --merge --admin || echo "Merge failed or already done."
